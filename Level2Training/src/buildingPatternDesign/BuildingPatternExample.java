package buildingPatternDesign;

//Product – The product class defines the type of the complex object that is to be generated by the builder pattern.
//Builder – This abstract base class defines all of the steps that must be taken in order to correctly create a product. Each step is generally abstract as the actual functionality of the builder is carried out in the concrete subclasses. The GetProduct method is used to return the final product. The builder class is often replaced with a simple interface.
//ConcreteBuilder – There may be any number of concrete builder classes inheriting from Builder. These classes contain the functionality to create a particular complex product.
//Director – The director-class controls the algorithm that generates the final product object. A director object is instantiated and its Construct method is called. The method includes a parameter to capture the specific concrete builder object that is to be used to generate the product. The director then calls methods of the concrete builder in the correct order to generate the product object. On completion of the process, the GetProduct method of the builder object can be used to return the product.
//Let’s see an Example of Builder Design Pattern : 
//Consider the construction of a home. Home is the final end product (object) that is to be returned as the output of the construction process. It will have many steps like basement construction, wall construction, and so on roof construction. Finally, the whole home object is returned. Here using the same process you can build houses with different properties.
interface HousePlan
{
   void setBasement(String basement);
   void setStructure(String structure);
   void setRoof(String roof);
   void setInterior(String interior);
}

class House implements HousePlan                      //product class
{
     String basement;
     String roof;
     String structure;
     String interior;
	@Override
	public void setBasement(String basement) 
	{
		this.basement = basement;
		
	}

	@Override
	public void setStructure(String structure)
	{
	   this.structure = structure;	
	}

	@Override
	public void setRoof(String roof)
	{
	   this.roof = roof;	
	}

	@Override
	public void setInterior(String interior) 
	{
	   this.interior = interior;	
	}
	
}
interface HouseBuilder                                      //Builder class
{
   void buildBasement();
   void buildInterior();
   void buildStructure();
   void buildRoof();
   public House getHouse();
}

class IglooHouseBuilder implements HouseBuilder             //Builder Concrete Classes or concrete builder
{
	private House house;
	
	public IglooHouseBuilder()
	{
		this.house = new House();
	}

	@Override
	public void buildBasement()
	{
	   this.house.setBasement("Ice Bars");
	}

	@Override
	public void buildInterior() 
	{
		this.house.setInterior("Ice Carvings");
	}

	@Override
	public void buildStructure() 
	{
	   this.house.setStructure("Ice Blocks");	
	}

	@Override
	public void buildRoof()
	{
		this.house.setRoof("Ice Dome");
	}

	@Override
	public House getHouse()
	{
		return this.house;
	}
	
}

class TipiHouseBuilder implements HouseBuilder                     //Builder Concrete Classes or concrete builder
{
	private House house;

	@Override
	public void buildBasement()
	{
		this.house.setBasement("Wooden Poles");
	}

	@Override
	public void buildInterior()
	{
	   this.house.setInterior("Fire Wood");	
	}

	@Override
	public void buildStructure() 
	{
	   this.house.setStructure("Wood and Ice");	
	}

	@Override
	public void buildRoof()
	{
		this.house.setRoof("wood , caribou and seal skins");
	}

	@Override
	public House getHouse()
	{
		return this.house;
	}
	
}

class CivilEngineer                                                  //Director Class
{
	private HouseBuilder housebuilder;
	public CivilEngineer(HouseBuilder housebuilder)
	{
		this.housebuilder = housebuilder;
	}
	
	public House getHouse()
	{
		return housebuilder.getHouse();
	}
	public void constructHouse()
	{
		this.housebuilder.buildBasement();
		this.housebuilder.buildInterior();
		this.housebuilder.buildRoof();
		this.housebuilder.buildStructure();
	}
}

//This building Pattern Design is used to construct the complex objects.
public class BuildingPatternExample 
{
	public static void main(String args[])
	{
		HouseBuilder iglooBuilder = new IglooHouseBuilder();
		CivilEngineer engineer = new CivilEngineer(iglooBuilder);
		engineer.constructHouse();
		House house = engineer.getHouse();
		System.out.println("Builder Constructed: "+house);
		System.out.println(house.basement);
		System.out.println(house.interior);
		System.out.println(house.roof);
		System.out.println(house.structure);
		
	}
}
